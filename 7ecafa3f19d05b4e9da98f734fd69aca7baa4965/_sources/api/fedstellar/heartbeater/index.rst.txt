:py:mod:`fedstellar.heartbeater`
================================

.. py:module:: fedstellar.heartbeater


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fedstellar.heartbeater.Heartbeater




.. py:class:: Heartbeater(node_name, neighbors, config)

   Bases: :py:obj:`threading.Thread`, :py:obj:`fedstellar.utils.observer.Observable`

   Thread based heartbeater that sends a beat message to all the neighbors of a node every `HEARTBEAT_PERIOD` seconds.

   It also maintains a list of active neighbors, which is created by receiving different heartbear messages.
   Neighbors from which a heartbeat is not received in ``NODE_TIMEOUT`` will be eliminated

   Communicates with node via observer pattern.

   :param nodo_padre: Node that use the heartbeater.
   :type nodo_padre: Node

   .. py:method:: run()

      Send a beat every HEARTBEAT_PERIOD seconds to all the neighbors of the node.
      Also, it will clear from the neighbors list the nodes that haven't sent a heartbeat in NODE_TIMEOUT seconds.
      It happend ``HEARTBEATER_REFRESH_NEIGHBORS_BY_PERIOD`` per HEARTBEAT_PERIOD


   .. py:method:: clear_nodes()

      Clear the list of neighbors.


   .. py:method:: add_node(node)

      Add a node to the list of neighbors.

      :param node: Node to add to the list of neighbors.
      :type node: Node


   .. py:method:: add_node_role(node, role)

      Add a node to the list of neighbors.

      :param node: Node name
      :type node: Node
      :param role: Role of the node


   .. py:method:: get_nodes(print=False)

      Print the list of actual neighbors.

      Returns:



   .. py:method:: stop()

      Stop the heartbeater.


   .. py:method:: update_config_with_neighbors()

      Update the config with the actual neighbors.



